#!/usr/bin/env python3
"""
Script de test pour v√©rifier le CRUD des exp√©ditions
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database import get_all_expeditions, add_expedition, update_expedition, delete_expedition, get_expedition_stats
from datetime import datetime

def test_crud_expeditions():
    """Test complet du CRUD des exp√©ditions"""
    print("üß™ Test du CRUD des exp√©ditions")
    print("=" * 50)
    
    # Test 1: R√©cup√©rer toutes les exp√©ditions
    print("\n1Ô∏è‚É£ Test de r√©cup√©ration des exp√©ditions...")
    try:
        expeditions = get_all_expeditions()
        print(f"‚úÖ {len(expeditions)} exp√©ditions r√©cup√©r√©es")
        for exp in expeditions[:3]:  # Afficher les 3 premi√®res
            print(f"   - {exp.get('number', 'N/A')} : {exp.get('client', 'N/A')}")
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration: {e}")
        return False
    
    # Test 2: Ajouter une nouvelle exp√©dition
    print("\n2Ô∏è‚É£ Test d'ajout d'exp√©dition...")
    try:
        new_expedition_data = {
            'client': 'Test Client CRUD',
            'reference_commande': 'TST',  # R√©f√©rence tr√®s courte (3 caract√®res)
            'date_livraison': datetime.now().strftime('%Y-%m-%d'),
            'transporteurs': 'DHL Express',
            'observation': 'Test CRUD - Exp√©dition de test',
            'liste_articles_livres': 'Articles de test'
        }
        
        expedition_id = add_expedition(new_expedition_data)
        if expedition_id:
            print(f"‚úÖ Exp√©dition cr√©√©e avec l'ID: {expedition_id}")
            test_expedition_id = expedition_id
        else:
            print("‚ùå √âchec de la cr√©ation")
            return False
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation: {e}")
        return False
    
    # Test 3: R√©cup√©rer les statistiques
    print("\n3Ô∏è‚É£ Test des statistiques...")
    try:
        stats = get_expedition_stats()
        print(f"‚úÖ Statistiques r√©cup√©r√©es:")
        print(f"   - Total: {stats.get('total', 0)}")
        print(f"   - En pr√©paration: {stats.get('en_preparation', 0)}")
        print(f"   - Livr√©es: {stats.get('livrees', 0)}")
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des stats: {e}")
    
    # Test 4: Mettre √† jour l'exp√©dition
    print("\n4Ô∏è‚É£ Test de mise √† jour...")
    try:
        update_data = {
            'client': 'Test Client CRUD - Modifi√©',
            'reference_commande': 'MOD',  # R√©f√©rence tr√®s courte (3 caract√®res)
            'date_livraison': datetime.now().strftime('%Y-%m-%d'),
            'transporteurs': 'Chronopost',
            'observation': 'Test CRUD - Exp√©dition modifi√©e',
            'liste_articles_livres': 'Articles modifi√©s'
        }
        
        success = update_expedition(test_expedition_id, update_data)
        if success:
            print("‚úÖ Exp√©dition mise √† jour avec succ√®s")
        else:
            print("‚ùå √âchec de la mise √† jour")
            return False
    except Exception as e:
        print(f"‚ùå Erreur lors de la mise √† jour: {e}")
        return False
    
    # Test 5: V√©rifier la mise √† jour
    print("\n5Ô∏è‚É£ V√©rification de la mise √† jour...")
    try:
        expeditions = get_all_expeditions()
        updated_exp = None
        for exp in expeditions:
            if exp.get('id') == test_expedition_id:
                updated_exp = exp
                break
        
        if updated_exp:
            print(f"‚úÖ Exp√©dition trouv√©e: {updated_exp.get('client', 'N/A')}")
            print(f"   - Transporteur: {updated_exp.get('carrier', 'N/A')}")
        else:
            print("‚ùå Exp√©dition mise √† jour non trouv√©e")
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")
    
    # Test 6: Supprimer l'exp√©dition
    print("\n6Ô∏è‚É£ Test de suppression...")
    try:
        success = delete_expedition(test_expedition_id)
        if success:
            print("‚úÖ Exp√©dition supprim√©e avec succ√®s")
        else:
            print("‚ùå √âchec de la suppression")
            return False
    except Exception as e:
        print(f"‚ùå Erreur lors de la suppression: {e}")
        return False
    
    # Test 7: V√©rifier la suppression
    print("\n7Ô∏è‚É£ V√©rification de la suppression...")
    try:
        expeditions = get_all_expeditions()
        deleted_exp = None
        for exp in expeditions:
            if exp.get('id') == test_expedition_id:
                deleted_exp = exp
                break
        
        if not deleted_exp:
            print("‚úÖ Exp√©dition bien supprim√©e")
        else:
            print("‚ùå Exp√©dition toujours pr√©sente apr√®s suppression")
            return False
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")
    
    print("\nüéâ Tous les tests CRUD sont pass√©s avec succ√®s !")
    return True

if __name__ == "__main__":
    success = test_crud_expeditions()
    if success:
        print("\n‚úÖ Le CRUD des exp√©ditions fonctionne correctement")
        sys.exit(0)
    else:
        print("\n‚ùå Des erreurs ont √©t√© d√©tect√©es dans le CRUD")
        sys.exit(1) 