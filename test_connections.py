#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de test pour v√©rifier les connexions entre BD, Backend et Frontend
"""

import sys
import traceback

def test_database_connection():
    """Test de la connexion √† la base de donn√©es PostgreSQL"""
    print("üîç Test de connexion √† la base de donn√©es...")
    try:
        import psycopg2
        from database import PG_CONN
        
        conn = psycopg2.connect(**PG_CONN)
        cursor = conn.cursor()
        
        # Test simple de requ√™te
        cursor.execute("SELECT version()")
        version = cursor.fetchone()
        print(f"‚úÖ Connexion PostgreSQL r√©ussie - Version: {version[0]}")
        
        # Test de la table produits
        cursor.execute("SELECT COUNT(*) FROM sge_cre.produits")
        count = cursor.fetchone()
        print(f"‚úÖ Table produits accessible - {count[0]} produits trouv√©s")
        
        # Test de la table individus
        cursor.execute("SELECT COUNT(*) FROM sge_cre.individus")
        count = cursor.fetchone()
        print(f"‚úÖ Table individus accessible - {count[0]} utilisateurs trouv√©s")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur de connexion √† la base de donn√©es: {e}")
        return False

def test_backend_functions():
    """Test des fonctions backend"""
    print("\nüîç Test des fonctions backend...")
    try:
        import database
        
        # Test de la fonction get_all_products
        products = database.get_all_products()
        print(f"‚úÖ Fonction get_all_products() - {len(products)} produits r√©cup√©r√©s")
        
        # Test de la fonction list_users
        users = database.list_users()
        print(f"‚úÖ Fonction list_users() - {len(users)} utilisateurs r√©cup√©r√©s")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur dans les fonctions backend: {e}")
        traceback.print_exc()
        return False

def test_frontend_imports():
    """Test des imports du frontend"""
    print("\nüîç Test des imports du frontend...")
    try:
        import customtkinter as ctk
        print("‚úÖ CustomTkinter import√© avec succ√®s")
        
        # Test des modules principaux
        modules_to_test = [
            'AUTHENTIFICATION',
            'dashboard', 
            'stock_management_page',
            'reception_page',
            'rapport_analytics',
            'warehouse_page',
            'Expeditions'
        ]
        
        for module in modules_to_test:
            try:
                __import__(module)
                print(f"‚úÖ Module {module} import√© avec succ√®s")
            except ImportError as e:
                print(f"‚ùå Erreur import module {module}: {e}")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur dans les imports frontend: {e}")
        return False

def test_app_launch():
    """Test du lancement de l'application"""
    print("\nüîç Test du lancement de l'application...")
    try:
        # Test d'import de l'app principale
        from app import App
        print("‚úÖ Classe App import√©e avec succ√®s")
        
        # Test de cr√©ation de l'instance (sans lancer la boucle principale)
        app = App()
        print("‚úÖ Instance de l'application cr√©√©e avec succ√®s")
        
        # Fermer proprement
        app.destroy()
        print("‚úÖ Application ferm√©e proprement")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du lancement de l'application: {e}")
        traceback.print_exc()
        return False

def main():
    """Fonction principale de test"""
    print("üöÄ D√©marrage des tests de connexion...\n")
    
    tests = [
        ("Base de donn√©es", test_database_connection),
        ("Fonctions Backend", test_backend_functions),
        ("Imports Frontend", test_frontend_imports),
        ("Lancement App", test_app_launch)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erreur critique dans {test_name}: {e}")
            results.append((test_name, False))
    
    # R√©sum√©
    print("\n" + "="*50)
    print("üìä R√âSUM√â DES TESTS")
    print("="*50)
    
    all_passed = True
    for test_name, result in results:
        status = "‚úÖ R√âUSSI" if result else "‚ùå √âCHEC"
        print(f"{test_name}: {status}")
        if not result:
            all_passed = False
    
    print("\n" + "="*50)
    if all_passed:
        print("üéâ TOUS LES TESTS SONT PASS√âS !")
        print("‚úÖ La base de donn√©es, le backend et le frontend sont connect√©s.")
        print("\nüìù Instructions pour tester l'application compl√®te:")
        print("1. Lancez l'application: python app.py")
        print("2. Connectez-vous avec un utilisateur existant")
        print("3. Testez les diff√©rentes fonctionnalit√©s")
    else:
        print("‚ö†Ô∏è  CERTAINS TESTS ONT √âCHOU√â")
        print("‚ùå V√©rifiez les erreurs ci-dessus avant de lancer l'application")
    
    print("="*50)

if __name__ == "__main__":
    main() 