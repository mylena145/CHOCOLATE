#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de correction des contraintes de cl√©s √©trang√®res
R√©sout tous les probl√®mes d'insertion dans la base de donn√©es SGE
"""

import psycopg2
import os
import sys
from datetime import datetime

# Configuration de la base de donn√©es
PG_CONN = dict(
    dbname="postgres",
    user="postgres",
    password="postgres123",
    host="localhost",
    port="5432",
    client_encoding="utf8",
    options="-c client_encoding=utf8",
    connect_timeout=10
)

def test_connection():
    """Teste la connexion √† la base de donn√©es"""
    try:
        conn = psycopg2.connect(**PG_CONN)
        cursor = conn.cursor()
        cursor.execute("SELECT version();")
        version = cursor.fetchone()
        print(f"‚úÖ Connexion r√©ussie √† PostgreSQL: {version[0]}")
        
        # V√©rifier que le sch√©ma sge_cre existe
        cursor.execute("SELECT schema_name FROM information_schema.schemata WHERE schema_name = 'sge_cre'")
        if not cursor.fetchone():
            print("‚ùå Le sch√©ma 'sge_cre' n'existe pas")
            print("üí° Ex√©cutez d'abord le script SGE_CRE.sql pour cr√©er les tables")
            conn.close()
            return False
        
        # Lister les tables existantes
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'sge_cre' 
            ORDER BY table_name
        """)
        tables = [row[0] for row in cursor.fetchall()]
        print(f"üìã Tables trouv√©es dans sge_cre: {', '.join(tables)}")
        
        # Lister les s√©quences existantes
        cursor.execute("""
            SELECT sequence_name 
            FROM information_schema.sequences 
            WHERE sequence_schema = 'sge_cre' 
            ORDER BY sequence_name
        """)
        sequences = [row[0] for row in cursor.fetchall()]
        print(f"üîÑ S√©quences trouv√©es: {', '.join(sequences)}")
        
        conn.close()
        return True
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False

def execute_sql_file(filename):
    """Ex√©cute un fichier SQL"""
    try:
        # Lire le contenu du fichier avec encodage UTF-8
        with open(filename, 'r', encoding='utf-8') as file:
            sql_content = file.read()
        
        # Se connecter √† la base
        conn = psycopg2.connect(**PG_CONN)
        conn.autocommit = False  # D√©sactiver l'auto-commit pour les transactions
        cursor = conn.cursor()
        
        print(f"üîÑ Ex√©cution du script: {filename}")
        
        # Diviser le script en commandes individuelles
        # G√©rer les blocs DO $$ ... $$ correctement
        commands = []
        current_command = ""
        in_do_block = False
        
        for line in sql_content.split('\n'):
            line = line.strip()
            if not line or line.startswith('--'):
                continue
                
            if 'DO $$' in line:
                in_do_block = True
                current_command = line
            elif in_do_block:
                current_command += " " + line
                if '$$;' in line:
                    in_do_block = False
                    commands.append(current_command)
                    current_command = ""
            elif line.endswith(';'):
                current_command += " " + line
                commands.append(current_command)
                current_command = ""
            else:
                current_command += " " + line
        
        # Ajouter la derni√®re commande si elle existe
        if current_command.strip():
            commands.append(current_command)
        
        # Ex√©cuter les commandes
        for i, command in enumerate(commands):
            command = command.strip()
            if command:
                try:
                    cursor.execute(command)
                    print(f"  ‚úÖ Commande {i+1} ex√©cut√©e")
                except Exception as e:
                    print(f"  ‚ùå Erreur commande {i+1}: {e}")
                    print(f"  Commande: {command[:100]}...")
                    conn.rollback()
                    return False
        
        # Valider les changements
        conn.commit()
        print(f"‚úÖ Script {filename} ex√©cut√© avec succ√®s")
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ex√©cution du script {filename}: {e}")
        return False

def verify_data():
    """V√©rifie que les donn√©es ont √©t√© correctement ins√©r√©es"""
    try:
        conn = psycopg2.connect(**PG_CONN)
        cursor = conn.cursor()
        
        print("\nüîç V√©rification des donn√©es ins√©r√©es:")
        
        # V√©rifier les tables principales
        tables = [
            'organisations', 'individus', 'repertoire', 'produits',
            'receptions', 'entrepots', 'cellules', 'zone_stockage',
            'colis', 'lots', 'materiel_emballage', 'commandes',
            'commandes_achats', 'commandes_vends'
        ]
        
        for table in tables:
            try:
                cursor.execute(f"SELECT COUNT(*) FROM sge_cre.{table}")
                count = cursor.fetchone()[0]
                print(f"  üìä {table}: {count} enregistrements")
            except Exception as e:
                print(f"  ‚ùå Erreur table {table}: {e}")
        
        # V√©rifier les contraintes de cl√©s √©trang√®res
        print("\nüîó Test des contraintes de cl√©s √©trang√®res:")
        
        # Test colis -> zone_stockage
        cursor.execute("""
            SELECT COUNT(*) FROM sge_cre.colis c 
            JOIN sge_cre.zone_stockage z ON c.id_zo_stock = z.id_zo_stock
        """)
        count = cursor.fetchone()[0]
        print(f"  ‚úÖ Colis avec zones valides: {count}")
        
        # Test zone_stockage -> entrepots
        cursor.execute("""
            SELECT COUNT(*) FROM sge_cre.zone_stockage z 
            JOIN sge_cre.entrepots e ON z.id_entrepot = e.id_entrepot
        """)
        count = cursor.fetchone()[0]
        print(f"  ‚úÖ Zones avec entrep√¥ts valides: {count}")
        
        # Test lots -> produits
        cursor.execute("""
            SELECT COUNT(*) FROM sge_cre.lots l 
            JOIN sge_cre.produits p ON l.id_produit = p.id_produit
        """)
        count = cursor.fetchone()[0]
        print(f"  ‚úÖ Lots avec produits valides: {count}")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")
        return False

def main():
    """Fonction principale"""
    print("=" * 60)
    print("üîß SCRIPT DE CORRECTION DES CONTRAINTES DE CL√âS √âTRANG√àRES")
    print("=" * 60)
    print(f"‚è∞ D√©but: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Test de connexion
    if not test_connection():
        print("‚ùå Impossible de se connecter √† la base de donn√©es")
        print("\nüí° Solutions possibles:")
        print("1. V√©rifiez que PostgreSQL est d√©marr√©")
        print("2. V√©rifiez les param√®tres de connexion dans PG_CONN")
        print("3. Assurez-vous que le sch√©ma 'sge_cre' existe")
        sys.exit(1)
    
    # Ex√©cuter le script de correction
    sql_file = "fix_database_constraints.sql"
    if not os.path.exists(sql_file):
        print(f"‚ùå Fichier {sql_file} non trouv√©")
        sys.exit(1)
    
    if not execute_sql_file(sql_file):
        print("‚ùå √âchec de l'ex√©cution du script SQL")
        sys.exit(1)
    
    # V√©rifier les donn√©es
    if not verify_data():
        print("‚ùå √âchec de la v√©rification des donn√©es")
        sys.exit(1)
    
    print("\n" + "=" * 60)
    print("‚úÖ CORRECTION TERMIN√âE AVEC SUCC√àS")
    print("=" * 60)
    print(f"‚è∞ Fin: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("\nüéâ Toutes les contraintes de cl√©s √©trang√®res ont √©t√© corrig√©es !")
    print("üì¶ Les donn√©es sont maintenant coh√©rentes et utilisables.")

if __name__ == "__main__":
    main() 