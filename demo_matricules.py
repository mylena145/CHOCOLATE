#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
D√©monstration du syst√®me de g√©n√©ration automatique de matricules
"""

import sys
import os

# Ajouter le r√©pertoire courant au path pour importer les modules
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from matricule_manager import MatriculeManager

def demo_generation_matricules():
    """D√©monstration de la g√©n√©ration de matricules"""
    print("üéØ D√âMONSTRATION - Syst√®me de G√©n√©ration Automatique de Matricules")
    print("=" * 70)
    
    # Liste des r√¥les sp√©cifiques
    roles_specifiques = [
        "Responsable des stocks",
        "Magasinier", 
        "Emballeur",
        "Responsable de la logistique",
        "Agent de logistique",
        "Livreur",
        "Responsable informatique",
        "Technicien informatique",
        "Responsable de la s√©curit√© physique",
        "Garde de s√©curit√©"
    ]
    
    print("\nüìã R√îLES ET PR√âFIXES DE MATRICULES")
    print("-" * 50)
    
    for i, role in enumerate(roles_specifiques, 1):
        prefix = MatriculeManager.get_role_prefix(role)
        print(f"{i:2d}. {role:<35} ‚Üí {prefix}")
    
    print("\nüöÄ G√âN√âRATION AUTOMATIQUE DE MATRICULES")
    print("-" * 50)
    
    # Simuler la cr√©ation de plusieurs utilisateurs pour chaque r√¥le
    for role in roles_specifiques:
        print(f"\nüë§ {role}:")
        prefix = MatriculeManager.get_role_prefix(role)
        
        # G√©n√©rer 3 matricules pour ce r√¥le (simulation de 3 utilisateurs)
        for i in range(3):
            matricule = MatriculeManager.generate_matricule(role)
            print(f"   ‚Ä¢ Utilisateur {i+1}: {matricule}")
    
    print("\nüîç IDENTIFICATION DE R√îLES PAR MATRICULE")
    print("-" * 50)
    
    # Tester l'identification de r√¥les
    matricules_test = [
        "RS001",  # Responsable des stocks
        "MG002",  # Magasinier
        "EM003",  # Emballeur
        "LV001",  # Livreur
        "RI001",  # Responsable informatique
        "TI002",  # Technicien informatique
        "RP001",  # Responsable de la s√©curit√© physique
        "GS001"   # Garde de s√©curit√©
    ]
    
    for matricule in matricules_test:
        role_identifie = MatriculeManager.get_role_from_matricule(matricule)
        print(f"   {matricule} ‚Üí {role_identifie}")
    
    print("\n‚úÖ VALIDATION DE MATRICULES")
    print("-" * 50)
    
    # Tester la validation
    matricules_validation = [
        "RS001",      # ‚úÖ Valide
        "MG002",      # ‚úÖ Valide
        "INVALID",    # ‚ùå Invalide
        "A1",         # ‚ùå Trop court
        "RS123456789", # ‚ùå Trop long
        "RS001A",     # ‚ùå Format invalide
    ]
    
    for matricule in matricules_validation:
        is_valid, message = MatriculeManager.validate_matricule(matricule)
        status = "‚úÖ" if is_valid else "‚ùå"
        print(f"   {status} {matricule:<12} : {message}")

def demo_scenarios_reels():
    """D√©monstration de sc√©narios r√©els d'utilisation"""
    print("\n\nüé¨ SC√âNARIOS R√âELS D'UTILISATION")
    print("=" * 50)
    
    # Sc√©nario 1: Nouvelle embauche
    print("\nüìù Sc√©nario 1: Nouvelle embauche")
    print("   Situation: L'entreprise embauche un nouveau livreur")
    
    role = "Livreur"
    matricule = MatriculeManager.generate_matricule(role)
    prefix = MatriculeManager.get_role_prefix(role)
    
    print(f"   R√¥le s√©lectionn√©: {role}")
    print(f"   Pr√©fixe automatique: {prefix}")
    print(f"   Matricule g√©n√©r√©: {matricule}")
    print(f"   ‚úÖ Pr√™t √† √™tre attribu√© au nouvel employ√©")
    
    # Sc√©nario 2: Promotion interne
    print("\nüìà Sc√©nario 2: Promotion interne")
    print("   Situation: Un magasinier devient responsable des stocks")
    
    ancien_role = "Magasinier"
    nouveau_role = "Responsable des stocks"
    ancien_matricule = "MG001"
    nouveau_matricule = MatriculeManager.generate_matricule(nouveau_role)
    
    print(f"   Ancien r√¥le: {ancien_role} ({ancien_matricule})")
    print(f"   Nouveau r√¥le: {nouveau_role} ({nouveau_matricule})")
    print(f"   ‚úÖ Le matricule refl√®te la nouvelle responsabilit√©")
    
    # Sc√©nario 3: √âquipe de s√©curit√©
    print("\nüõ°Ô∏è Sc√©nario 3: √âquipe de s√©curit√©")
    print("   Situation: Cr√©ation d'une √©quipe de s√©curit√©")
    
    roles_securite = ["Responsable de la s√©curit√© physique", "Garde de s√©curit√©", "Garde de s√©curit√©"]
    matricules_securite = []
    
    for role in roles_securite:
        matricule = MatriculeManager.generate_matricule(role)
        matricules_securite.append(matricule)
        print(f"   {role}: {matricule}")
    
    print(f"   ‚úÖ √âquipe compl√®te avec matricules coh√©rents")

def demo_avantages_systeme():
    """D√©monstration des avantages du syst√®me"""
    print("\n\nüí° AVANTAGES DU SYST√àME")
    print("=" * 50)
    
    avantages = [
        "üéØ Identification rapide du r√¥le par matricule",
        "üî¢ Num√©rotation automatique et s√©quentielle", 
        "üîÑ G√©n√©ration automatique sans intervention manuelle",
        "‚úÖ Validation et v√©rification d'unicit√©",
        "üìä Tra√ßabilit√© et statistiques d'utilisation",
        "üõ°Ô∏è Coh√©rence entre r√¥le et matricule",
        "‚ö° Interface intuitive d'administration",
        "üîß Outils de test et validation int√©gr√©s"
    ]
    
    for avantage in avantages:
        print(f"   {avantage}")

if __name__ == "__main__":
    try:
        demo_generation_matricules()
        demo_scenarios_reels()
        demo_avantages_systeme()
        
        print("\n" + "=" * 70)
        print("üéâ D√âMONSTRATION TERMIN√âE")
        print("Le syst√®me est pr√™t √† √™tre utilis√© dans l'application!")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la d√©monstration: {e}")
        import traceback
        traceback.print_exc() 